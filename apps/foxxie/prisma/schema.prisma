generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator json {
  provider = "prisma-json-types-generator"
}

model schedule {
  id        Int      @id @default(autoincrement())
  taskId    String   @map("task_id") @db.VarChar
  time      DateTime @db.Timestamp(6)
  recurring String?  @db.VarChar
  catchUp   Boolean  @default(true) @map("catch_up")
  data      Json
}

model moderation {
  caseId       Int       @map("case_id")
  createdAt    DateTime? @map("created_at") @db.Timestamp(6)
  duration     BigInt?
  extraData    Json?     @map("extra_data") @db.Json
  guildId      String    @map("guild_id") @db.VarChar(19)
  moderatorId  String    @map("moderator_id") @db.VarChar(19)
  reason       String?   @db.VarChar(2000)
  imageUrl     String?   @map("image_url") @db.VarChar(2000)
  refrenceId   Int?      @map("refrence_id") @db.SmallInt
  userId       String?   @map("user_id") @db.VarChar(19)
  channelId    String?   @map("channel_id") @db.VarChar(19)
  logChannelId String?   @map("log_channel_id") @db.VarChar(19)
  logMessageId String?   @map("log_message_id") @db.VarChar(19)
  type         Int       @db.SmallInt
  metadata     Int       @default(0) @db.SmallInt

  @@id([caseId, guildId])
}

model Suggestion {
  id Int
  guild guilds @relation(fields: [guildId], references: [id])
  guildId String
  authorId String
  messageId String
  createdAt DateTime @default(now())
  repliedAt DateTime?
  archivedAt DateTime?

  @@id([id, guildId])
}

model starboard {
  enabled       Boolean @default(true)
  userId        String? @map("userid") @db.VarChar(19)
  messageId     String  @map("messageid") @db.VarChar(19)
  channelId     String? @map("channelid") @db.VarChar(19)
  guildId       String  @map("guildid") @db.VarChar(19)
  starMessageId String @map("starmessageid") @db.VarChar
  stars         Int     @default(0) @db.SmallInt
  starChannelId String? @map("starchannelid") @db.VarChar
  id            Int?

  @@id([messageId, guildId, starMessageId])
}

model guilds {
  id                                   String   @id @db.VarChar(19)
  prefix                               String   @db.VarChar(10)
  language                             String   @default("en-US") @db.VarChar
  disableNaturalPrefix                 Boolean  @default(false) @map("disable-natural-prefix")
  disabledCommands                     String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(32)[]")) @map("disabled-commands") @db.VarChar(32)
  /// [PermissionNodeEntries]
  permissionsUsers                     Json     @default("[]") @map("permissions.users")
  /// [PermissionNodeEntries]
  permissionsRoles                     Json     @default("[]") @map("permissions.roles")
  channelsMediaOnly                    String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("channels.media-only") @db.VarChar(19)
  channelsLogsModeration               String?  @map("channels.logs.moderation") @db.VarChar(19)
  channelsLogsImage                    String?  @map("channels.logs.image") @db.VarChar(19)
  channelsLogsMemberAdd                String?  @map("channels.logs.member-add") @db.VarChar(19)
  channelsLogsMemberRemove             String?  @map("channels.logs.member-remove") @db.VarChar(19)
  channelsLogsMemberNicknameUpdate     String?  @map("channels.logs.member-nickname-update") @db.VarChar(19)
  channelsLogsMemberUsernameUpdate     String?  @map("channels.logs.member-username-update") @db.VarChar(19)
  channelsLogsMemberRolesUpdate        String?  @map("channels.logs.member-roles-update") @db.VarChar(19)
  channelsLogsMessageDelete            String?  @map("channels.logs.message-delete") @db.VarChar(19)
  channelsLogsMessageDeleteNsfw        String?  @map("channels.logs.message-delete-nsfw") @db.VarChar(19)
  channelsLogsMessageUpdate            String?  @map("channels.logs.message-update") @db.VarChar(19)
  channelsLogsMessageUpdateNsfw        String?  @map("channels.logs.message-update-nsfw") @db.VarChar(19)
  channelsLogsPrune                    String?  @map("channels.logs.prune") @db.VarChar(19)
  channelsLogsReaction                 String?  @map("channels.logs.reaction") @db.VarChar(19)
  channelsLogsRoleCreate               String?  @map("channels.logs.role-create") @db.VarChar(19)
  channelsLogsRoleUpdate               String?  @map("channels.logs.role-update") @db.VarChar(19)
  channelsLogsRoleDelete               String?  @map("channels.logs.role-delete") @db.VarChar(19)
  channelsLogsChannelCreate            String?  @map("channels.logs.channel-create") @db.VarChar(19)
  channelsLogsChannelUpdate            String?  @map("channels.logs.channel-update") @db.VarChar(19)
  channelsLogsChannelDelete            String?  @map("channels.logs.channel-delete") @db.VarChar(19)
  channelsLogsEmojiCreate              String?  @map("channels.logs.emoji-create") @db.VarChar(19)
  channelsLogsEmojiUpdate              String?  @map("channels.logs.emoji-update") @db.VarChar(19)
  channelsLogsEmojiDelete              String?  @map("channels.logs.emoji-delete") @db.VarChar(19)
  channelsLogsServerUpdate             String?  @map("channels.logs.server-update") @db.VarChar(19)
  channelsLogsVoiceActivity            String?  @map("channels.logs.voice-activity") @db.VarChar(19)
  channelsIgnoreAll                    String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("channels.ignore.all") @db.VarChar(19)
  channelsIgnoreMessageEdit            String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("channels.ignore.message-edit") @db.VarChar(19)
  channelsIgnoreMessageDelete          String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("channels.ignore.message-delete") @db.VarChar(19)
  channelsIgnoreReactionAdd            String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("channels.ignore.reaction-add") @db.VarChar(19)
  disabledChannels                     String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("disabled-channels") @db.VarChar(19)
  disabledCommandsChannels             Json     @default("[]") @map("disabled-commands-channels")
  disboardChannel String? @db.VarChar(19)
  disboardMessage String?
  disboardEmbed String?
  eventsBanAdd                         Boolean  @default(true) @map("events.ban-add")
  eventsBanRemove                      Boolean  @default(true) @map("events.ban-remove")
  eventsKick                           Boolean  @default(true) @map("events.kick")
  eventsMuteAdd                        Boolean  @default(true) @map("events.mute-add")
  eventsMuteRemove                     Boolean  @default(true) @map("events.mute-remove")
  levelingMessagesEnabled Boolean @default(true) @map("leveling.messages.enabled")
  /// [LevelingRolesEntries]
  levelingRoles Json    @default("[]") @map("leveling.roles")
  messageCount                         Int      @default(0) @map("message-count")
  messagesIgnoreChannels               String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("messages.ignore-channels") @db.VarChar(19)
  messagesModerationDm                 Boolean  @default(false) @map("messages.moderation-dm")
  messagesModerationReasonDisplay      Boolean  @default(true) @map("messages.moderation-reason-display")
  messagesModerationMessageDisplay     Boolean  @default(true) @map("messages.moderation-message-display")
  messagesModerationAutoDelete         Boolean  @default(false) @map("messages.moderation-auto-delete")
  messagesModeratorNameDisplay         Boolean  @default(true) @map("messages.moderator-name-display")
  messagesAutoDeleteIgnoredAll         Boolean  @default(false) @map("messages.auto-delete.ignored-all")
  messagesAutoDeleteIgnoredRoles       String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("messages.auto-delete.ignored-roles") @db.VarChar(19)
  messagesAutoDeleteIgnoredChannels    String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("messages.auto-delete.ignored-channels") @db.VarChar(19)
  messagesAutoDeleteIgnoredCommands    String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(32)[]")) @map("messages.auto-delete.ignored-commands") @db.VarChar(32)
  /// [RolesPersistEntries]
  rolesPersist                         Json     @default("[]") @map("roles.persist")
  rolesPersistEnabled                  Boolean  @default(true) @map("roles.persist-enabled")
  reactionRoles                        Json     @default("[]") @map("reaction-roles")
  rolesAdmin                           String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("roles.admin") @db.VarChar(19)
  rolesInitialHumans                   String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("roles.initial-humans") @db.VarChar(19)
  rolesInitialBots                     String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("roles.initial-bots") @db.VarChar(19)
  rolesModerator                       String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("roles.moderator") @db.VarChar(19)
  rolesMuted                           String?  @map("roles.muted") @db.VarChar(19)
  rolesRestrictedReaction              String?  @map("roles.restricted-reaction") @db.VarChar(19)
  rolesRestrictedEmbed                 String?  @map("roles.restricted-embed") @db.VarChar(19)
  rolesRestrictedEmoji                 String?  @map("roles.restricted-emoji") @db.VarChar(19)
  rolesRestrictedAttachment            String?  @map("roles.restricted-attachment") @db.VarChar(19)
  rolesRestrictedVoice                 String?  @map("roles.restricted-voice") @db.VarChar(19)
  selfmodAttachmentsEnabled            Boolean  @default(false) @map("selfmod.attachments.enabled")
  selfmodAttachmentsIgnoredRoles       String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.attachments.ignored-roles") @db.VarChar(19)
  selfmodAttachmentsIgnoredChannels    String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.attachments.ignored-channels") @db.VarChar(19)
  selfmodAttachmentsSoftAction         Int      @default(0) @map("selfmod.attachments.soft-action") @db.SmallInt
  selfmodAttachmentsHardAction         Int      @default(0) @map("selfmod.attachments.hard-action") @db.SmallInt
  selfmodAttachmentsHardActionDuration BigInt?  @map("selfmod.attachments.hard-action-duration")
  selfmodAttachmentsThresholdMaximum   Int      @default(10) @map("selfmod.attachments.threshold-maximum") @db.SmallInt
  selfmodAttachmentsThresholdDuration  Int      @default(60000) @map("selfmod.attachments.threshold-duration")
  selfmodCapitalsEnabled               Boolean  @default(false) @map("selfmod.capitals.enabled")
  selfmodCapitalsIgnoredRoles          String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.capitals.ignored-roles") @db.VarChar(19)
  selfmodCapitalsIgnoredChannels       String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.capitals.ignored-channels") @db.VarChar(19)
  selfmodCapitalsMinimum               Int      @default(15) @map("selfmod.capitals.minimum") @db.SmallInt
  selfmodCapitalsMaximum               Int      @default(50) @map("selfmod.capitals.maximum") @db.SmallInt
  selfmodCapitalsSoftAction            Int      @default(0) @map("selfmod.capitals.soft-action") @db.SmallInt
  selfmodCapitalsHardAction            Int      @default(0) @map("selfmod.capitals.hard-action") @db.SmallInt
  selfmodCapitalsHardActionDuration    BigInt?  @map("selfmod.capitals.hard-action-duration")
  selfmodCapitalsThresholdMaximum      Int      @default(10) @map("selfmod.capitals.threshold-maximum") @db.SmallInt
  selfmodCapitalsThresholdDuration     Int      @default(60000) @map("selfmod.capitals.threshold-duration")
  selfmodLinksEnabled                  Boolean  @default(false) @map("selfmod.links.enabled")
  selfmodLinksAllowed                  String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(128)[]")) @map("selfmod.links.allowed") @db.VarChar(128)
  selfmodLinksIgnoredRoles             String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.links.ignored-roles") @db.VarChar(19)
  selfmodLinksIgnoredChannels          String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.links.ignored-channels") @db.VarChar(19)
  selfmodLinksSoftAction               Int      @default(0) @map("selfmod.links.soft-action") @db.SmallInt
  selfmodLinksHardAction               Int      @default(0) @map("selfmod.links.hard-action") @db.SmallInt
  selfmodLinksHardActionDuration       BigInt?  @map("selfmod.links.hard-action-duration")
  selfmodLinksThresholdMaximum         Int      @default(10) @map("selfmod.links.threshold-maximum") @db.SmallInt
  selfmodLinksThresholdDuration        Int      @default(60000) @map("selfmod.links.threshold-duration")
  selfmodMessagesEnabled               Boolean  @default(false) @map("selfmod.messages.enabled")
  selfmodMessagesIgnoredRoles          String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.messages.ignored-roles") @db.VarChar(19)
  selfmodMessagesIgnoredChannels       String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.messages.ignored-channels") @db.VarChar(19)
  selfmodMessagesMaximum               Int      @default(5) @map("selfmod.messages.maximum") @db.SmallInt
  selfmodMessagesQueueSize             Int      @default(50) @map("selfmod.messages.queue-size") @db.SmallInt
  selfmodMessagesSoftAction            Int      @default(0) @map("selfmod.messages.soft-action") @db.SmallInt
  selfmodMessagesHardAction            Int      @default(0) @map("selfmod.messages.hard-action") @db.SmallInt
  selfmodMessagesHardActionDuration    BigInt?  @map("selfmod.messages.hard-action-duration")
  selfmodMessagesThresholdMaximum      Int      @default(10) @map("selfmod.messages.threshold-maximum") @db.SmallInt
  selfmodMessagesThresholdDuration     Int      @default(60000) @map("selfmod.messages.threshold-duration")
  selfmodNewlinesEnabled               Boolean  @default(false) @map("selfmod.newlines.enabled")
  selfmodNewlinesIgnoredRoles          String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.newlines.ignored-roles") @db.VarChar(19)
  selfmodNewlinesIgnoredChannels       String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.newlines.ignored-channels") @db.VarChar(19)
  selfmodNewlinesMaximum               Int      @default(20) @map("selfmod.newlines.maximum") @db.SmallInt
  selfmodNewlinesSoftAction            Int      @default(0) @map("selfmod.newlines.soft-action") @db.SmallInt
  selfmodNewlinesHardAction            Int      @default(0) @map("selfmod.newlines.hard-action") @db.SmallInt
  selfmodNewlinesHardActionDuration    BigInt?  @map("selfmod.newlines.hard-action-duration")
  selfmodNewlinesThresholdMaximum      Int      @default(10) @map("selfmod.newlines.threshold-maximum") @db.SmallInt
  selfmodNewlinesThresholdDuration     Int      @default(60000) @map("selfmod.newlines.threshold-duration")
  selfmodInvitesEnabled                Boolean  @default(false) @map("selfmod.invites.enabled")
  selfmodInvitesIgnoredCodes           String[] @default([]) @map("selfmod.invites.ignored-codes") @db.VarChar
  selfmodInvitesIgnoredGuilds          String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.invites.ignored-guilds") @db.VarChar(19)
  selfmodInvitesIgnoredRoles           String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.invites.ignored-roles") @db.VarChar(19)
  selfmodInvitesIgnoredChannels        String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.invites.ignored-channels") @db.VarChar(19)
  selfmodInvitesSoftAction             Int      @default(0) @map("selfmod.invites.soft-action") @db.SmallInt
  selfmodInvitesHardAction             Int      @default(0) @map("selfmod.invites.hard-action") @db.SmallInt
  selfmodInvitesHardActionDuration     BigInt?  @map("selfmod.invites.hard-action-duration")
  selfmodInvitesThresholdMaximum       Int      @default(10) @map("selfmod.invites.threshold-maximum") @db.SmallInt
  selfmodInvitesThresholdDuration      Int      @default(60000) @map("selfmod.invites.threshold-duration")
  selfmodFilterEnabled                 Boolean  @default(false) @map("selfmod.filter.enabled")
  selfmodFilterRaw                     String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(32)[]")) @map("selfmod.filter.raw") @db.VarChar(32)
  selfmodFilterIgnoredRoles            String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.filter.ignored-roles") @db.VarChar(19)
  selfmodFilterIgnoredChannels         String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.filter.ignored-channels") @db.VarChar(19)
  selfmodFilterSoftAction              Int      @default(0) @map("selfmod.filter.soft-action") @db.SmallInt
  selfmodFilterHardAction              Int      @default(0) @map("selfmod.filter.hard-action") @db.SmallInt
  selfmodFilterHardActionDuration      BigInt?  @map("selfmod.filter.hard-action-duration")
  selfmodFilterThresholdMaximum        Int      @default(10) @map("selfmod.filter.threshold-maximum") @db.SmallInt
  selfmodFilterThresholdDuration       Int      @default(60000) @map("selfmod.filter.threshold-duration")
  selfmodReactionsEnabled              Boolean  @default(false) @map("selfmod.reactions.enabled")
  selfmodReactionsIgnoredRoles         String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.reactions.ignored-roles") @db.VarChar(19)
  selfmodReactionsIgnoredChannels      String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.reactions.ignored-channels") @db.VarChar(19)
  selfmodReactionsMaximum              Int      @default(10) @map("selfmod.reactions.maximum") @db.SmallInt
  selfmodReactionsAllowed              String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(128)[]")) @map("selfmod.reactions.allowed") @db.VarChar(128)
  selfmodReactionsBlocked              String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(128)[]")) @map("selfmod.reactions.blocked") @db.VarChar(128)
  selfmodReactionsSoftAction           Int      @default(0) @map("selfmod.reactions.soft-action") @db.SmallInt
  selfmodReactionsHardAction           Int      @default(0) @map("selfmod.reactions.hard-action") @db.SmallInt
  selfmodReactionsHardActionDuration   BigInt?  @map("selfmod.reactions.hard-action-duration")
  selfmodReactionsThresholdMaximum     Int      @default(10) @map("selfmod.reactions.threshold-maximum") @db.SmallInt
  selfmodReactionsThresholdDuration    Int      @default(60000) @map("selfmod.reactions.threshold-duration")
  selfmodIgnoredChannels               String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("selfmod.ignored-channels") @db.VarChar(19)
  suggestions Suggestion[]
  suggestionsAutoThread Boolean @default(true)
  suggestionsButtons Boolean @default(false)
  suggestionsChannel String?
  suggestionsEmbed Boolean @default(true)
  suggestionsUpdateHistory Boolean @default(true)
  starboardChannelId                   String?  @map("starboard.channel_id") @db.VarChar(19)
  starboardEmojis                      String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(128)[]")) @map("starboard.emojis") @db.VarChar(128)
  starboardMinimum                     Int      @default(3) @map("starboard.minimum") @db.SmallInt
  starboardSelfStar                    Boolean  @default(true) @map("starboard.self-star")
  /// [TagEntries]
  tags                                 Json     @default("[]")
  words                                Json     @default("[]")
  birthdayRole                         String?  @map("roles.birthday") @db.VarChar(19)
  birthdayChannel                      String?  @map("channels.birthday") @db.VarChar(19)
  /// [HighlightEntries]
  highlights                           Json     @default("[]")
  starboardIgnoredChannels             String[] @default(dbgenerated("(ARRAY[]::character varying[])::character varying(19)[]")) @map("starboard.ignored-channels") @db.VarChar(19)
}

model User {
  userid       String      @id @db.VarChar(19)
  moderationDm Boolean     @default(true) @map("moderationDm")
  user         UserLastFM?
}

model UserLastFM {
  userid           String               @id @db.VarChar(19)
  blocked          Boolean              @default(false)
  userType         Int                  @default(0)
  dataSource       Int                  @default(1)
  usernameLastFM   String
  sessionKeyLastFM String?
  lastFmPro        Boolean?
  registeredLastFM DateTime?
  totalPlaycount   Int?
  rymEnabled       Boolean?
  embedType        Int                  @default(0)
  footerOption     Int                  @default(1)
  responseMode     Int                  @default(1)
  privacyLevel     Int                  @default(1)
  lastIndexed      DateTime?
  lastSmallIndexed DateTime?
  lastUpdated DateTime?
  lastScrobbleUpdate DateTime?
  lastUsed         DateTime?
  emoteReactions   String[]
  timeZone         String?
  scrobbleByMusicBot Boolean @default(true)
  numberFormat     Int                  @default(1)
  user          User                 @relation(fields: [userid], references: [userid], onDelete: Cascade, map: "userlastfm_user_fkey")
  albums           UserAlbum[]
  artists          UserArtist[]
  discogsReleases  UserDiscogsReleases[]
  discogs          UserDiscogs?
  plays            UserPlay[]
  tracks           UserTrack[]
}

model UserDiscogs {
  userid              String      @id @db.VarChar(19)
  discogsId           Int?
  username            String?
  accessToken         String?
  accessTokenSecret   String?
  minimumValue        String?
  medianValue         String?
  maximumValue        String?
  hideValue           Boolean?    @default(false)
  lastUpdated         DateTime?
  releasesLastUpdated DateTime?
  user                UserLastFM? @relation(fields: [userid], references: [userid])
}

model UserArtist {
  userArtistId Int        @default(autoincrement())
  userId       String     @db.VarChar(19)
  name         String
  playCount    Int
  user         UserLastFM @relation(fields: [userId], references: [userid])

  @@id([userArtistId, userId])
}

model UserAlbum {
  userAlbumId Int        @default(autoincrement())
  userId      String     @db.VarChar(19)
  name        String
  artistName  String
  playCount   Int
  user        UserLastFM @relation(fields: [userId], references: [userid])

  @@id([userAlbumId, userId])
}

model UserTrack {
  userTrackId Int        @default(autoincrement())
  userId      String     @db.VarChar(19)
  name        String
  artistName  String
  playCount   Int
  user        UserLastFM @relation(fields: [userId], references: [userid])

  @@id([userTrackId, userId])
}

model UserPlay {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String     @db.VarChar(19)
  trackName  String
  albumName  String?
  artistName String
  timePlayed DateTime
  msPlayed   Int?
  playSource Int?       @default(0)
  user       UserLastFM @relation(fields: [userId], references: [userid])
}

model UserDiscogsReleases {
  userDiscogsReleaseId Int            @id @default(autoincrement())
  userId               String         @db.VarChar(19)
  instanceId           Int
  dateAdded            DateTime
  rating               Int?
  quantity             String
  releaseId            Int
  release              DiscogsRelease @relation(fields: [releaseId], references: [discogsId])
  user                 UserLastFM     @relation(fields: [userId], references: [userid])
}

model DiscogsRelease {
  discogsId                Int                         @id
  masterId                 Int?
  albumId                  Int?
  title                    String
  artist                   String
  artistId                 Int?
  artistDiscogsId          Int
  featuringArtistJoin      String?
  featuringArtist          String?
  featuringArtistId        Int?
  featuringArtistDiscogsId Int?
  coverUrl                 String
  year                     Int?
  format                   String
  formatText               String?
  label                    String
  secondLabel              String?
  lowestPrice              Int?
  formatDescriptions       DiscogsFormatDescriptions[]
  genres                   DiscogsGenre[]
  styles                   DiscogsStyle[]
  userDiscogsReleases      UserDiscogsReleases[]
}

model DiscogsFormatDescriptions {
  id             Int            @default(autoincrement())
  releaseId      Int
  description    String
  discogsRelease DiscogsRelease @relation(fields: [releaseId], references: [discogsId])

  @@id([id, releaseId])
}

model DiscogsGenre {
  id             Int            @default(autoincrement())
  releaseId      Int
  description    String
  discogsRelease DiscogsRelease @relation(fields: [releaseId], references: [discogsId])

  @@id([id, releaseId])
}

model DiscogsStyle {
  id             Int            @default(autoincrement())
  releaseId      Int
  description    String
  discogsRelease DiscogsRelease @relation(fields: [releaseId], references: [discogsId])

  @@id([id, releaseId])
}

model MemberNote {
  userId    String    @db.VarChar(19)
  guildId   String    @db.VarChar(19)
  authorId  String?   @db.VarChar(19)
  reason    String?   @db.VarChar(2000)
  createdAt DateTime? @db.Timestamp(6)
  member    Member    @relation(fields: [userId, guildId], references: [userId, guildId])

  @@id([userId, guildId])
}

model Member {
  userId       String      @db.VarChar(19)
  guildId      String      @db.VarChar(19)
  messageCount Int         @default(0)
  level        Int         @default(0)
  points       Int         @default(0)
  notes        MemberNote?

  @@id([userId, guildId])
}

model SpotifyPlaylist {
  id String @id
  name String
  userId String?
  description String
  imageURL String
  ownerId String
  ownerName String
  public Boolean
  url String
 tracks SpotifyPlaylistTrack[]
}

model SpotifyPlaylistTrack {
  id String
  playlistId String
  addedAt DateTime
  addedBy String
  albumId String
  albumImageURL String
  albumName String
  artistId String
  artistName String
  duration Int @default(0)
  explicit Boolean @default(false)
  isLocal Boolean @default(false)
  name String
  type String

  @@id([id, playlistId])
  
  playlist SpotifyPlaylist @relation(fields: [playlistId], references: [id])
}